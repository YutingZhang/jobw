#!/bin/bash

function force_int() {
echo "...... [ "`date`" ] ...... [ Force killing ]"
kill -9 $JOBC_JOB_PID > /dev/null 2>&1
}

function safe_int() {

echo "...... [ "`date`" ] ...... [ Try to stop ]"
kill -2 $JOBC_JOB_PID > /dev/null 2>&1
trap "force_int" 2

JOBC_IS_CANCELED=1

}

function safe_exit() {
    touch "$PROC_PREFIX.INTERRUPTED"
    exit 0
}

# main

pushd `dirname $0` > /dev/null ; SCRIPT_DIR="`pwd`"; popd > /dev/null

if [ "$1" == "" ]; then
    echo "JOB-CLIENT WACTHER"
    echo "  "`basename "$0"`" JOBC_VAR_DIR JOBCW_ID" >&2
    exit 1
fi

JOBC_VAR_DIR="$1"

JOBCW_ID="$2"
if [ "$2" == "" ]; then
    JOBCW_ID="unknown"
fi

mkdir -p "$JOBC_VAR_DIR/q"  # queueing
mkdir -p "$JOBC_VAR_DIR/r"  # running
mkdir -p "$JOBC_VAR_DIR/d"  # done
mkdir -p "$JOBC_VAR_DIR/c"  # canceled

EHTER_UUID=`ifconfig | grep ether | sha1sum | awk '{print $1}'`
HD_UUID=`blkid | grep -oP 'UUID="\K[^"]+' | sha1sum | awk '{print $1}'`
HOSTNAME=`hostname`

mkdir -p "$JOBC_VAR_DIR/proc"
PROC_PREFIX="$JOBC_VAR_DIR/proc"/${HOSTNAME}.${EHTER_UUID}.${HD_UUID}.$$

rm -f "$PROC_PREFIX.INTERRUPTED"
rm -f "$JOBC_VAR_DIR/DONE"

while true; do
    JOBCW_QUIT_ON_EMPTY=0
    if [ -f "$JOBC_VAR_DIR/quit_on_empty" ]; then
        JOBCW_QUIT_ON_EMPTY=1
    fi
    if [ -f "$JOBC_VAR_DIR/quit" ]; then
        break;
    fi
   
    rm -f "${PROC_PREFIX}.JOBCW_QUEUE_NONEMPTY"

    echo "...... [ DIR PATH ] $JOBC_VAR_DIR"
    echo "...... [ "`date`" ] ...... [ List ]"
    ls -tr $JOBC_VAR_DIR/q | head -n1 | while read line ; do
        touch "${PROC_PREFIX}.JOBCW_QUEUE_NONEMPTY"

        JOB_FOLDER_Q="$JOBC_VAR_DIR/q/$line"
        JOB_FOLDER_R="$JOBC_VAR_DIR/r/$line"
        #JOB_FOLDER_D="$JOBC_VAR_DIR/d/$line"
        
        echo "...... [ DIR PATH ] $JOBC_VAR_DIR"
        echo "...... [ "`date`" ] ...... [ Run ]"
        echo "[ $JOB_FOLDER_Q ]"
        mv "$JOB_FOLDER_Q" "$JOBC_VAR_DIR/r"
        if [ "$?" != "0" ]; then
            break;
        fi
        trap "safe_int" 2
        JOBC_IS_CANCELED=0
        bash "$JOB_FOLDER_R" & JOBC_JOB_PID=`echo $!`
        
        ( echo "[ "`date`" ] [ "$JOBCW_ID" ]"$'\n'"  START:  $line" ; \
            ( $SCRIPT_DIR/session_info | sed -e 's/^/\t/' ) ) >> $JOBC_VAR_DIR/log
        wait $JOBC_JOB_PID
        JOBC_JOB_EC=$?
        
        if [ "$JOBC_JOB_EC" -eq "0" ]; then
            mv "$JOB_FOLDER_R" "$JOBC_VAR_DIR/d"
            ( echo "[ "`date`" ] [ "$JOBCW_ID" ]"$'\n'"  DONE:   $line" ; \
                ( $SCRIPT_DIR/session_info | sed -e 's/^/    /' ) ) >> $JOBC_VAR_DIR/log
        else
            mv "$JOB_FOLDER_R" "$JOBC_VAR_DIR/c"
            ( echo "[ "`date`" ] [ "$JOBCW_ID" ]"$'\n'"  CANCEL: $line" ; \
                ( $SCRIPT_DIR/session_info | sed -e 's/^/    /' ) ) >> $JOBC_VAR_DIR/log
        fi

    done
    
    trap 'safe_exit' 2
    if [ ! -f "${PROC_PREFIX}.JOBCW_QUEUE_NONEMPTY" ]; then
        echo "...... [ DIR PATH ] $JOBC_VAR_DIR"
        if [ "$JOBCW_QUIT_ON_EMPTY" -ne "0" ]; then
            echo "...... [ "`date`" ] ...... [ End Watching Due to Empty Queue]"
            break;
        fi
        SLEEP_TIME=$(($RANDOM % 10 + 5))
        echo "...... [ "`date`" ] ...... [ Sleep for ${SLEEP_TIME}s ]"
        sleep ${SLEEP_TIME}
    fi

done

touch $JOBC_VAR_DIR/DONE

exit 0

