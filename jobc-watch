#!/bin/bash

BLACK='\033[0;30m'
DGRAY='\033[1;30m'
RED='\033[0;31m'
LRED='\033[1;31m'
GREEN='\033[0;32m'
LGREEN='\033[1;32m'
BROWN='\033[0;33m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
LBLUE='\033[1;34m'
PURPLE='\033[0;35m'
LPURPLE='\033[1;35m'
CYAN='\033[0;36m'
LCYAN='\033[1;36m'
LGRAY='\033[0;37m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

function force_int() {
    echo
    echo -e "...... [ ${DGRAY}"`date`"${NC} ] ...... [ ${RED}Force killing the running job${NC} ]"
    kill -9 $JOBC_JOB_PID > /dev/null 2>&1
}

function safe_int() {
    echo
    echo -e "...... [ ${DGRAY}"`date`"${NC} ] ...... [ ${LRED}Try to stop${NC} ]"
    echo -e "...... [ ${LRED}To force killing, press ${WHITE}^C${LRED} again. ${NC} ]"
    kill -2 $JOBC_JOB_PID > /dev/null 2>&1
    trap "force_int" 2
}

function request_to_end() {
    touch "$PROC_PREFIX.REQUEST_TO_END"
    echo
    echo -e "...... [ ${DGRAY}"`date`"${NC} ] ...... [ ${YELLOW}User request to end${NC} ]"
    echo -e "...... [ ${YELLOW}To interrupt the current process, press ${WHITE}^C${YELLOW} again. ${NC} ]"
}

function request_to_end_during_running() {
    request_to_end
    trap "safe_int" 2
}

function safe_exit() {
    touch "$PROC_PREFIX.INTERRUPTED"
    echo
    echo -e "...... [ ${DGRAY}"`date`"${NC} ] ...... [ ${PURPLE}Ended by the user${NC} ]"
    exit 0
}

# main

pushd `dirname $0` > /dev/null ; SCRIPT_DIR="`pwd`"; popd > /dev/null

if [ "$1" == "" ]; then
    echo "JOB-CLIENT WACTHER" >&2
    echo "  "`basename "$0"`" JOBC_VAR_DIR JOBCW_ID" >&2
    exit 1
fi

JOBC_VAR_DIR="$1"

JOBCW_ID="$2"
if [ "$2" == "" ]; then
    JOBCW_ID="unknown"
fi

mkdir -p "$JOBC_VAR_DIR/q"  # queueing
mkdir -p "$JOBC_VAR_DIR/r"  # running
mkdir -p "$JOBC_VAR_DIR/d"  # done
mkdir -p "$JOBC_VAR_DIR/c"  # canceled

EHTER_UUID=`ifconfig | grep ether | sha1sum | awk '{print $1}'`
HD_UUID=`blkid | grep -oP 'UUID="\K[^"]+' | sha1sum | awk '{print $1}'`
HOSTNAME=`hostname`

mkdir -p "$JOBC_VAR_DIR/proc"
PROC_PREFIX="$JOBC_VAR_DIR/proc"/${HOSTNAME}.${EHTER_UUID}.${HD_UUID}.$$

rm -f "$PROC_PREFIX.REQUEST_TO_END"
rm -f "$PROC_PREFIX.INTERRUPTED"
rm -f "$JOBC_VAR_DIR/DONE"

trap 'safe_exit' 2

while true; do
    JOBCW_QUIT_ON_EMPTY=0
    if [ -f "$JOBC_VAR_DIR/quit_on_empty" ]; then
        JOBCW_QUIT_ON_EMPTY=1
    fi
    if [ -f "$JOBC_VAR_DIR/quit" ]; then
        break;
    fi
   
    rm -f "${PROC_PREFIX}.JOBCW_QUEUE_NONEMPTY"

    echo -e "...... [ ${LBLUE}DIR PATH${NC} ] $JOBC_VAR_DIR"
    echo -e "...... [ ${DGRAY}"`date`"${NC} ] ...... [ ${CYAN}List${NC} ]"
    ls -tr $JOBC_VAR_DIR/q | head -n1 | while read line ; do

        # the code in the block actually run only for one iteration

        if [ -f "$PROC_PREFIX.REQUEST_TO_END" ]; then
            safe_exit;
        fi

        touch "${PROC_PREFIX}.JOBCW_QUEUE_NONEMPTY"

        JOB_FOLDER_Q="$JOBC_VAR_DIR/q/$line"
        JOB_FOLDER_R="$JOBC_VAR_DIR/r/$line"
        #JOB_FOLDER_D="$JOBC_VAR_DIR/d/$line"
        
        echo -e "...... [ ${LBLUE}DIR PATH${NC} ] $JOBC_VAR_DIR"
        echo -e "...... [ ${DGRAY}"`date`"${NC} ] ...... [ ${YELLOW}Run${NC} ]"
        echo -e "[ $JOB_FOLDER_Q ]"
        mv "$JOB_FOLDER_Q" "$JOBC_VAR_DIR/r"
        if [ "$?" != "0" ]; then
            break;
        fi
        trap "request_to_end_during_running" 2

        bash "$JOB_FOLDER_R" & JOBC_JOB_PID=`echo $!`
        
        ( echo -e "[ ${DGRAY}"`date`"${NC} ] [ "$JOBCW_ID" ]"$'\n'"  START:  $line" ; \
            ( $SCRIPT_DIR/session_info | sed -e 's/^/\t/' ) ) >> $JOBC_VAR_DIR/log
        wait $JOBC_JOB_PID
        JOBC_JOB_EC=$?
        
        trap "request_to_end" 2
        
        if [ "$JOBC_JOB_EC" -eq "0" ]; then
            mv "$JOB_FOLDER_R" "$JOBC_VAR_DIR/d"
            ( echo -e "[ ${DGRAY}"`date`"${NC} ] [ "$JOBCW_ID" ]"$'\n'"  ${LGREEN}DONE:${NC}   $line" ; \
                ( $SCRIPT_DIR/session_info | sed -e 's/^/    /' ) ) >> $JOBC_VAR_DIR/log
        else
            mv "$JOB_FOLDER_R" "$JOBC_VAR_DIR/c"
            ( echo -e "[ ${DGRAY}"`date`"${NC} ] [ "$JOBCW_ID" ]"$'\n'"  ${RED}CANCEL:${NC} $line" ; \
                ( $SCRIPT_DIR/session_info | sed -e 's/^/    /' ) ) >> $JOBC_VAR_DIR/log
        fi

    done
    
    if [ -f "$PROC_PREFIX.REQUEST_TO_END" ]; then
        safe_exit
    fi

    trap 'safe_exit' 2

    if [ ! -f "${PROC_PREFIX}.JOBCW_QUEUE_NONEMPTY" ]; then
        echo -e "...... [ ${LBLUE}DIR PATH${NC} ] $JOBC_VAR_DIR"
        if [ "$JOBCW_QUIT_ON_EMPTY" -ne "0" ]; then
            echo -e "...... [ ${DGRAY}"`date`"${NC} ] ...... [ ${PURPLE}Ended due to an empty queue${NC} ]"
            break;
        fi
        SLEEP_TIME=$(($RANDOM % 10 + 5))
        echo -e "...... [ ${DGRAY}"`date`"${NC} ] ...... [ ${BROWN}Sleep for ${SLEEP_TIME}s${NC} ]"
        sleep ${SLEEP_TIME}
    fi

done

touch $JOBC_VAR_DIR/DONE

exit 0

